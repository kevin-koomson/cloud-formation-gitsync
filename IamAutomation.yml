Description: "Automation of IAM user creation with CloudFormation"
Resources:
  OneTimePassword2:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: One time password for generated users
      Name: OneTimePassword2
      GenerateSecretString:
        ExcludeLowercase: false
        ExcludeNumbers: false
        ExcludePunctuation: false
        ExcludeUppercase: false
        IncludeSpace: false
        PasswordLength: 12
        RequireEachIncludedType: true

  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: s3-user-group
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: ec2-user-group
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  Ec2User:
    Type: AWS::IAM::User
    Properties:
      UserName: ec2-user
      Groups:
        - !Ref EC2UserGroup
      LoginProfile:
        Password: !Join [ '', [ '{{resolve:secretsmanager:', !Ref OneTimePassword2, '}}' ] ]
        PasswordResetRequired: true
      Tags:
        - Key: Email
          Value: ec2user@example.com

  S3User:
    Type: AWS::IAM::User
    Properties:
      UserName: s3-user
      Groups:
        - !Ref S3UserGroup
      LoginProfile:
        Password: !Join [ '', [ '{{resolve:secretsmanager:', !Ref OneTimePassword2, '}}' ] ]
        PasswordResetRequired: true
      Tags:
        - Key: Email
          Value: s3user@example.com

  S3UserEmail:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /iam/s3-user/email
      Type: String
      Value: s3user@example.com
      Description: "Email for s3-user"

  Ec2UserEmail:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /iam/ec2-user/email
      Type: String
      Value: ec2user@example.com
      Description: "Email for ec2-user"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: UserCreationNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - secretsmanager:GetSecretValue
                  - iam:GetUser
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/iam/*'
                  - !Ref OneTimePassword2
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'

  UserCreationNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserCreationNotificationFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Timeout: 30
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');

          const ssm = new AWS.SSM();
          const secretsManager = new AWS.SecretsManager();

          console.log("Lambda function initialized.");
          console.info("Lambda function initialized - CloudWatch log group should be created.");

          exports.handler = async (event) => {
            console.info("Received event: " + JSON.stringify(event));

            const detail = event.detail || {};
            const requestParameters = detail.requestParameters || {};
            const username = requestParameters.userName || '';

            if (!username) {
              console.error("Username not found in event");
              return;
            }

            try {
              // Get user email from Parameter Store
              const emailParam = await ssm.getParameter({
                Name: `/iam/${username}/email`
              }).promise();
              const email = emailParam.Parameter.Value;

              // Get one-time password from Secrets Manager
              const passwordSecret = await secretsManager.getSecretValue({
                SecretId: 'OneTimePassword2'
              }).promise();
              const password = passwordSecret.SecretString;

              console.info(`New user created: ${username}`);
              console.info(`User email: ${email}`);
              console.info(`Temporary password: ${password}`);

              return {
                statusCode: 200,
                body: JSON.stringify(`Successfully processed user creation for ${username}`)
              };
            } catch (err) {
              console.error(`Error processing user creation: ${err}`);
              return {
                statusCode: 500,
                body: JSON.stringify(`Error: ${err}`)
              };
            }
          };
  

  UserCreationEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IAMUserCreationRule
      Description: "Rule to detect IAM user creation events"
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser
      State: ENABLED
      Targets:
        - Arn: !GetAtt UserCreationNotificationFunction.Arn
          Id: UserCreationTarget

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UserCreationNotificationFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UserCreationEventRule.Arn

Outputs:
  OneTimePassword2ARN:
    Description: "ARN of the one-time password secret"
    Value: !Ref OneTimePassword2

  S3UserName:
    Description: "Name of the S3 user"
    Value: !Ref S3User

  EC2UserName:
    Description: "Name of the EC2 user"
    Value: !Ref Ec2User

  S3UserEmail:
    Description: "Email of the S3 user"
    Value: !GetAtt S3UserEmail.Value

  EC2UserEmail:
    Description: "Email of the EC2 user"
    Value: !GetAtt Ec2UserEmail.Value

  LambdaFunction:
    Description: "Lambda function for user creation notification"
    Value: !Ref UserCreationNotificationFunction